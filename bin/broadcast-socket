#!/usr/bin/env node

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { existsSync } from 'fs';
import { parseArgs } from 'node:util';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Check if we're in development mode (src/ directory exists)
const srcPath = join(__dirname, '..', 'src');
const isDevelopment = existsSync(srcPath);

let BroadcastServer, ClusterManager, logWithTimestamp, RedisManager;

if (isDevelopment) {
  // Development: import from built dist files (after npm run build)
  const serverModule = await import('../dist/server.js');
  const clusterModule = await import('../dist/cluster.js');
  const utilsModule = await import('../dist/utils.js');
  const redisModule = await import('../dist/redis.js');

  BroadcastServer = serverModule.BroadcastServer;
  ClusterManager = clusterModule.ClusterManager;
  logWithTimestamp = utilsModule.logWithTimestamp;
  RedisManager = redisModule.RedisManager;
} else {
  // Production: import from published package
  const serverModule = await import('broadcast-socket/dist/server.js');
  const clusterModule = await import('broadcast-socket/dist/cluster.js');
  const utilsModule = await import('broadcast-socket/dist/utils.js');
  const redisModule = await import('broadcast-socket/dist/redis.js');

  BroadcastServer = serverModule.BroadcastServer;
  ClusterManager = clusterModule.ClusterManager;
  logWithTimestamp = utilsModule.logWithTimestamp;
  RedisManager = redisModule.RedisManager;
}

function printUsage() {
  const { options } = parseArgs({
    options: {
      port: { type: 'string', short: 'p' },
      'cors-origin': { type: 'string' },
      'redis-url': { type: 'string' },
      workers: { type: 'string' },
      'ping-interval': { type: 'string' },
      'heartbeat-timeout': { type: 'string' },
      cluster: { type: 'boolean' },
      help: { type: 'boolean', short: 'h' }
    },
    strict: false
  });

  console.log(`
Usage: broadcast-socket [options]

Options:
  -p, --port <number>              Port to run the server on (default: 8080)
  --cors-origin <string>           CORS origin (default: '*')
  --redis-url <string>             Redis connection URL (default: 'redis://localhost:6379')
  --workers <number>               Number of worker processes (default: CPU count)
  --ping-interval <number>         Ping interval in milliseconds (default: 30000)
  --heartbeat-timeout <number>     Heartbeat timeout in milliseconds (default: 60000)
  --cluster                        Run in cluster mode
  -h, --help                       Show this help message

Environment Variables:
  PORT                             Port to run the server on
  CORS_ORIGIN                      CORS origin
  REDIS_URL                        Redis connection URL
  WORKERS                          Number of worker processes
  PING_INTERVAL                    Ping interval in milliseconds
  HEARTBEAT_TIMEOUT                Heartbeat timeout in milliseconds

Examples:
  broadcast-socket --port 3000 --redis-url redis://localhost:6380
  broadcast-socket --cluster --workers 4
  PORT=3000 REDIS_URL=redis://localhost:6380 broadcast-socket
`);
}

function parseArgs() {
  const {
    values,
    positionals,
    tokens
  } = parseArgs({
    options: {
      port: { type: 'string', short: 'p' },
      'cors-origin': { type: 'string' },
      'redis-url': { type: 'string' },
      workers: { type: 'string' },
      'ping-interval': { type: 'string' },
      'heartbeat-timeout': { type: 'string' },
      cluster: { type: 'boolean' },
      help: { type: 'boolean', short: 'h' }
    },
    strict: false
  });

  if (values.help) {
    printUsage();
    process.exit(0);
  }

  // Validate port
  if (values.port) {
    const port = parseInt(values.port, 10);
    if (isNaN(port) || port < 1 || port > 65535) {
      console.error(`Error: Invalid port number: ${values.port}`);
      process.exit(1);
    }
    process.env.PORT = values.port;
  }

  // Validate workers
  if (values.workers) {
    const workers = parseInt(values.workers, 10);
    if (isNaN(workers) || workers < 1) {
      console.error(`Error: Invalid workers count: ${values.workers}`);
      process.exit(1);
    }
    process.env.WORKERS = values.workers;
  }

  // Validate ping interval
  if (values['ping-interval']) {
    const pingInterval = parseInt(values['ping-interval'], 10);
    if (isNaN(pingInterval) || pingInterval < 1000) {
      console.error(`Error: Invalid ping interval: ${values['ping-interval']} (minimum 1000ms)`);
      process.exit(1);
    }
    process.env.PING_INTERVAL = values['ping-interval'];
  }

  // Validate heartbeat timeout
  if (values['heartbeat-timeout']) {
    const heartbeatTimeout = parseInt(values['heartbeat-timeout'], 10);
    if (isNaN(heartbeatTimeout) || heartbeatTimeout < 1000) {
      console.error(`Error: Invalid heartbeat timeout: ${values['heartbeat-timeout']} (minimum 1000ms)`);
      process.exit(1);
    }
    process.env.HEARTBEAT_TIMEOUT = values['heartbeat-timeout'];
  }

  // Set other environment variables
  if (values['cors-origin']) {
    process.env.CORS_ORIGIN = values['cors-origin'];
  }
  if (values['redis-url']) {
    process.env.REDIS_URL = values['redis-url'];
  }

  // Check for unknown arguments
  if (positionals.length > 0) {
    console.error(`Error: Unknown arguments: ${positionals.join(', ')}`);
    printUsage();
    process.exit(1);
  }

  return { useCluster: values.cluster || false };
}

async function testRedisConnection() {
  const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';
  logWithTimestamp('info', `Testing Redis connection to ${redisUrl}...`);

  const redis = new RedisManager(redisUrl);

  try {
    // Set a timeout for the connection test
    const connectPromise = redis.connect();
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => {
        reject(new Error('Connection timeout after 5 seconds'));
      }, 5000);
    });

    await Promise.race([connectPromise, timeoutPromise]);
    logWithTimestamp('info', 'Redis connection test successful');
    await redis.disconnect();
  } catch (error) {
    try {
      await redis.disconnect();
    } catch (disconnectError) {
      // Ignore disconnect errors
    }
    console.error(`Error: Failed to connect to Redis at ${redisUrl}`);
    console.error(`Redis is required for cluster mode. Please ensure Redis is running and accessible.`);
    console.error(`Error details: ${error.message}`);
    process.exit(1);
  }
}

async function main() {
  try {
    const { useCluster } = parseArgs();

    logWithTimestamp('info', 'Starting Broadcast Socket Server...');

    if (useCluster) {
      logWithTimestamp('info', 'Running in cluster mode');
      await testRedisConnection();
      const clusterManager = new ClusterManager();
      await clusterManager.start();
    } else {
      logWithTimestamp('info', 'Running in single process mode');
      const server = new BroadcastServer();

      // Handle graceful shutdown
      process.on('SIGINT', async () => {
        logWithTimestamp('info', 'Received SIGINT, shutting down gracefully...');
        await server.stop();
        process.exit(0);
      });

      process.on('SIGTERM', async () => {
        logWithTimestamp('info', 'Received SIGTERM, shutting down gracefully...');
        await server.stop();
        process.exit(0);
      });

      await server.start();
    }
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

main().catch(console.error);