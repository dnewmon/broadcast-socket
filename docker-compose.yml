version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: broadcast-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  broadcast-socket:
    build: .
    container_name: broadcast-socket
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=*
      - WORKERS=2
      - PING_INTERVAL=30000
      - HEARTBEAT_TIMEOUT=60000
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - /app/node_modules
    networks:
      - broadcast-network

  # Load balancer (optional for multiple instances)
  nginx:
    image: nginx:alpine
    container_name: broadcast-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - broadcast-socket
    networks:
      - broadcast-network
    profiles:
      - loadbalancer

volumes:
  redis_data:
    driver: local

networks:
  broadcast-network:
    driver: bridge